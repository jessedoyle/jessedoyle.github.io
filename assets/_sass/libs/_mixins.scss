/// Makes an element's :before pseudoelement a FontAwesome icon.
/// @param {string} $content Optional content value to use.
@mixin icon($content: false) {

	text-decoration: none;

	&:before {

		@if $content {
			content: $content;
		}

		-moz-osx-font-smoothing: grayscale;
		-webkit-font-smoothing: antialiased;
		font-family: FontAwesome;
		font-style: normal;
		font-weight: normal;
		text-transform: none !important;
	}
}

@mixin icon-alt($content: false, $link: false) {
  @include icon($content);
  $size: _size(border-width) * 1.25;

  &:before {
    color: _palette(bg);
    text-shadow: $size 0px 0px _palette(border),
          ($size * -1) 0px 0px _palette(border),
          0px $size 0px _palette(border),
          0px ($size * -1) 0px _palette(border);

  }

  @if $link {
    &:hover {
      &:before {
        text-shadow: $size 0px 0px _palette(highlight),
              ($size * -1) 0px 0px _palette(highlight),
              0px $size 0px _palette(highlight),
              0px ($size * -1) 0px _palette(highlight);
      }
    }
  }
}

/// Applies padding to an element, taking the current element-margin value into account.
/// @param {mixed} $tb Top/bottom padding.
/// @param {mixed} $lr Left/right padding.
/// @param {list} $pad Optional extra padding (in the following order top, right, bottom, left)
/// @param {bool} $important If true, adds !important.
@mixin padding($tb, $lr, $pad: (0,0,0,0), $important: null) {

	@if $important {
		$important: '!important';
	}

	padding: ($tb + nth($pad,1)) ($lr + nth($pad,2)) max(0.1em, $tb - _size(element-margin) + nth($pad,3)) ($lr + nth($pad,4)) #{$important};
}

@mixin media-query($device) {
    @media screen and (max-width: $device) {
        @content;
    }
}